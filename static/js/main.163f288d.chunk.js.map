{"version":3,"sources":["util/colors.js","components/TopBar.jsx","components/bottom-bar/MapPanelButton.jsx","components/bottom-bar/MapPanel.jsx","components/bottom-bar/MintermInput.jsx","components/bottom-bar/ClearButton.jsx","components/bottom-bar/BottomBar.jsx","util/tableData.js","components/tables/GridButtonColorOverlay.jsx","components/tables/GridButton.jsx","components/tables/TableRow.jsx","components/tables/TableTopLabelBar.jsx","components/tables/TableLeftLabelBar.jsx","components/tables/GridVisualTable.jsx","components/tables/GroupDisplayRow.jsx","components/tables/GroupDisplay.jsx","components/tables/TableContainer.jsx","map-solver/util.js","map-solver/minterm.js","map-solver/kmap-group.js","map-solver/grouping-tree.js","map-solver/minterm-list.js","App.jsx","serviceWorker.js","index.js"],"names":["tempGroupingColors","colors","main","minor","background","gridButtonHover","gridButton","gridButtonTrue","gridButtonDontCare","TopBar","props","children","title","subtitle","Object","core_browser_esm","css","_templateObject","_templateObject2","_templateObject3","_templateObject4","buttonStyle","MapPanelButton_templateObject","activeButtonStyle","MapPanelButton_templateObject2","MapPanelButton","activeButtonNum","varNum","onClick","style","bind","MapPanel","activeButton","MapPanel_templateObject","MapPanel_templateObject2","MapPanel_templateObject3","bottom_bar_MapPanelButton","MintermInput","onMintermInput","_useState","useState","_useState2","slicedToArray","minterms","setMinterms","MintermInput_templateObject","onSubmit","event","preventDefault","mintermObj","mintermStr","terms","Set","dontCares","split","filter","termStr","forEach","dontcareTerm","Number","parseInt","substring","isNaN","add","Array","from","convertMintermStringToObj","MintermInput_templateObject2","MintermInput_templateObject3","type","id","name","placeholder","value","onChange","filteredInputArr","target","match","filteredInput","join","defaultProps","ClearButton_templateObject","ClearButton","BottomBar","onClearButtonClick","onPanelClick","BottomBar_templateObject","BottomBar_templateObject2","bottom_bar_MintermInput","bottom_bar_ClearButton","bottom_bar_MapPanel","tableData","2","leftLabelMap","leftTerms","topLabelMap","topTerms","gridSize","3","4","5","6","default","GridButtonColorOverlay","groupingColors","gridBoxSize","highlighted","baseSize","test","overlay","map","color","idx","GridButtonColorOverlay_templateObject","length","react_default","a","Fragment","GridButton","binaryValue","decimalValue","gridValue","valueStyling","concat","GridButton_templateObject","tables_GridButtonColorOverlay","GridButton_templateObject2","GridButton_templateObject3","GridButton_templateObject4","TableRow","leftTerm","gridValues","tiles","topTerm","mintermBinaryValue","mintermDecimalValue","separatorStyling","push","TableRow_templateObject","tables_GridButton","TableRow_templateObject2","TableTopLabelBar","labels","labelElements","label","TableTopLabelBar_templateObject","TableTopLabelBar_templateObject2","TableLeftLabelBar","reverse","TableLeftLabelBar_templateObject","TableLeftLabelBar_templateObject2","convertBinaryStringToVariableMinterm","binaryStr","char","correspondingVar","GridVisualTable","leftLabels","highlightedMinterms","term","topLabels","tableRows","GridVisualTable_templateObject","tables_TableRow","GridVisualTable_templateObject2","tables_TableLeftLabelBar","GridVisualTable_templateObject3","tables_TableTopLabelBar","GroupDisplayRow","mintermGroup","groupingText","decimalRepresentation","dec","unshift","GroupDisplayRow_templateObject","GroupDisplayRow_templateObject2","outputTerm","GroupDisplay","mintermGroups","onNextGroupingButtonClick","numberOfGroupings","setHighlightedMinterms","onMouseEnterRow","group","console","dir","depth","onMouseLeaveRow","GroupDisplay_templateObject","GroupDisplay_templateObject2","GroupDisplay_templateObject3","onMouseEnter","onMouseLeave","tables_GroupDisplayRow","key","mintermGroupings","TableContainer","onGridButtonClick","selectedMintermGroup","_ref","decimalIndex","TableContainer_templateObject","tables_GridVisualTable","tables_GroupDisplay","Util","insertIntoString","string","index","text","slice","range","n","toConsumableArray","keys","convertToBinaryString","num","padding","arguments","undefined","toString","padStart","convertBinaryStrToBoolArr","x","xorBoolArrays","arr1","arr2","outputLength","Math","min","outputArr","i","generateMasks","numOfTerms","_this","this","fixedIndicies","numOfNeighbors","pow","binaryNumStr","maskStr","generateFixedIndicies","_this2","fixedIndiciesList","mask","indicies","bool","sort","b","filterOnlySubarrayOfSmallestLength","arr","lengthOfSmallest","MAX_VALUE","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","subarray","err","return","Minterm","minterm","isDontCare","classCallCheck","getBinaryString","filteredFixedIndicies","numOfFreeTerms","neighbor","other","KMapGroup","variableNames","groupSize","mintermSize","getSize","outputTermRaw","getOutputTermRaw","getOutputTerm","binaryRepresentation","convertMintermArraysToDecimalArray","fill","fixedIndex","getTerm","every","rawValue","outputVariable","GroupingTreeNode","visitedMinterms","mintermQueue","groups","parent","activeChild","GroupingTree","root","current","child","childIndex","nextChild","moveCurrentToChild","moveCurrentToParent","moveCurrentToNextActiveChild","MintermList","numOfVariables","baseTenMinterms","baseTenDontCares","targetMinterm","ignoreDontCares","equals","targetMinterms","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","containsMinterm","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","addMinterm","targetDecimalMinterm","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","getDecimal","mintermList","numOfMatches","front","largestGroupSize","possibleGroupings","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","neighbors","getNeighborTerms","containsMinterms","__updateOtherMintermsDontCarenessWithThisList","currentGroup","getNumberOfMatchingMinterms","numOfUnvisitedTargetMintermsInGroup","numOfUnvisited","__getPossibleGroupingsOfLargestSize","addMinterms","groupingTree","allSolutions","getCurrent","_groupingTree$getCurr","currentMintermQueue","currentVisitedMinterms","currentGroups","shiftedQueue","__getPossibleGroupingsWithMostUnvisitedMinterms","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","possibleGrouping","visitedMintermsCopy","createCopy","groupsCopy","mintermQueueCopy","addChildToCurrent","grouping","otherMinterms","otherMinterm","thisListEquivalent","getMintermUsingNumber","copy","cookies","Cookies","initialVarNumPage","get","GridButtonData","generateNewGrid","fillNewGrid","newGrid","App","varNumPage","setVarNumPage","_useState3","_useState4","setGridValues","_useState5","_useState6","setGridBoxSize","_useState7","_useState8","setMintermGroupings","_useState9","_useState10","setSelectedMintermGroup","_useState11","_useState12","activeMinterms","setActiveMinterms","resetGridColors","setupGridColors","groupingIdx","gridIdx","useEffect","document","set","maxAge","App_templateObject","styles","App_templateObject2","components_TopBar","tables_TableContainer","gridValuesCopy","_","JSON","parse","stringify","newActiveMinterms","getGroups","newGridValues","bottom_bar_BottomBar","Boolean","window","location","hostname","ReactDOM","render","createElement","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.163f288d.chunk.js","sourcesContent":["const colors = {\r\n    main: '#06a77d',\r\n    minor: '#03644b',\r\n    background: '#eee',\r\n    gridButtonHover: 'rgba(0, 0, 0, 0.3)',\r\n    gridButton: 'rgba(0, 100, 50, 0.03)',\r\n    gridButtonTrue: '#50c1a4',\r\n    gridButtonDontCare: 'orange',\r\n};\r\n\r\nexport const tempGroupingColors = [\r\n    '#ff000044',\r\n    '#00ff0044',\r\n    '#0000ff44',\r\n    '#ffa50044',\r\n    '#ffff0066',\r\n    '#00800044',\r\n    '#6b8e2344',\r\n    '#00ffff44',\r\n    '#008b8b44',\r\n    '#ff00ff44',\r\n    '#8b008b44',\r\n    '#ff69b444',\r\n    '#70809044',\r\n    'rgba(30, 30, 200, 0.4)', \r\n    'rgba(200, 100, 100, 0.4)', \r\n    'rgba(100, 200, 150, 0.4)',\r\n    '#20b2aa66',\r\n    '#80008066',\r\n    '#4b008266',\r\n    '#ffa07a66',\r\n    '#afeeee66',\r\n    '#1e90ff66',\r\n    '#adff2f66',\r\n    '#cd5c5c66',\r\n    '#ff149366',\r\n    '#6a5acd66',\r\n    '#ff7f5066',\r\n];\r\n\r\nexport default colors;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../util/colors';\r\n\r\nfunction TopBar(props) {\r\n  const { children, title, subtitle } = props;\r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      flex-direction: column;\r\n      padding: 1rem;\r\n    `}>\r\n      <header css={css`\r\n        text-align: center;\r\n      `}>\r\n        <h1 css={css`\r\n          color: ${colors.main};\r\n        `}>\r\n          { title }\r\n        </h1>\r\n        <h2 css={css`\r\n          font-weight: normal;\r\n          color: ${colors.minor};\r\n        `}>\r\n          { subtitle }\r\n        </h2>\r\n      </header>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nTopBar.propTypes = {\r\n  children: PropTypes.object,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.string,\r\n};\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\n\r\nconst buttonStyle = css`\r\n  padding: 0 1rem;\r\n  height: 100%;\r\n  color: ${colors.main};\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${colors.main};\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst activeButtonStyle = css`\r\n  padding: 0 1rem;\r\n  height: 100%;\r\n  background: ${colors.main};\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  color: white;\r\n`;\r\n\r\nfunction MapPanelButton(props) {\r\n  const { activeButtonNum, varNum, onClick } = props;\r\n\r\n  const style = (activeButtonNum === varNum) ? activeButtonStyle : buttonStyle;\r\n  \r\n  return (\r\n    <li>\r\n      <button css={style} onClick={onClick.bind(null, varNum)}>\r\n        {varNum}\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nMapPanelButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  activeButtonNum: PropTypes.number,\r\n  varNum: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default MapPanelButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport MapPanelButton from './MapPanelButton.jsx';\r\n\r\nimport colors from '../../util/colors';\r\n\r\n\r\nfunction MapPanel(props) {\r\n  const { activeButton, onClick } = props;\r\n  return (\r\n    <div css={css`\r\n      color: ${colors.main};\r\n      font-weight: bold;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      align-items: left;\r\n      height: 100%;\r\n      padding: 0 1.5rem;\r\n    `}>\r\n      Variables\r\n      <nav css={css`\r\n        background: white;\r\n        border-radius: 5px;\r\n        height: 40px;\r\n        border: 2.5px solid ${colors.main};\r\n      `}>\r\n\r\n        <ul css={css`\r\n          display: flex;\r\n          height: 100%;\r\n        `}>\r\n          <MapPanelButton onClick={onClick} varNum={2} activeButtonNum={activeButton} />\r\n          <MapPanelButton onClick={onClick} varNum={3} activeButtonNum={activeButton} />\r\n          <MapPanelButton onClick={onClick} varNum={4} activeButtonNum={activeButton} />\r\n          <MapPanelButton onClick={onClick} varNum={5} activeButtonNum={activeButton} />\r\n          <MapPanelButton onClick={onClick} varNum={6} activeButtonNum={activeButton} />\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nMapPanel.propTypes = {\r\n  onClick: PropTypes.func,\r\n  activeButton: PropTypes.number,\r\n}\r\n\r\nexport default MapPanel;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\n\r\nfunction convertMintermStringToObj(mintermStr) {\r\n  const minterms = {\r\n    terms: new Set(),\r\n    dontCares: new Set(),\r\n  }\r\n  mintermStr\r\n    .split(' ')\r\n    .filter(termStr => termStr !== '')\r\n    .forEach((termStr) => {\r\n      if (termStr[0] === 'd') {\r\n        const dontcareTerm = Number.parseInt(termStr.substring(1));\r\n        if (Number.isNaN(dontcareTerm)) return;\r\n        minterms.dontCares.add(dontcareTerm);\r\n      } else { \r\n        minterms.terms.add(Number.parseInt(termStr));\r\n      }\r\n  });\r\n  minterms.terms = Array.from(minterms.terms);\r\n  minterms.dontCares = Array.from(minterms.dontCares);\r\n  return minterms;\r\n}\r\n\r\nfunction MintermInput(props) {\r\n\r\n  const { onMintermInput } = props;\r\n  const [ minterms, setMinterms ] = useState('');\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const mintermObj = convertMintermStringToObj(minterms);\r\n    onMintermInput(mintermObj);\r\n    setMinterms('');\r\n  };\r\n\r\n  const onUserInput = (event) => {\r\n    const inputString = event.target.value;\r\n    const filteredInputArr = inputString.match(/[0-9d ]/g);\r\n    const filteredInput = filteredInputArr ? filteredInputArr.join('') : '';\r\n    setMinterms(filteredInput);\r\n  }\r\n\r\n  return (\r\n    <form \r\n      css={css`\r\n        display: flex;\r\n        justify-content: center;\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n      `}\r\n      onSubmit={ onFormSubmit }\r\n    >\r\n      <label css={css`\r\n        color: ${colors.main};\r\n        font-weight: bold;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: left;\r\n        width: 100%;\r\n      `}>\r\n        Minterms\r\n        <input \r\n          css={css`\r\n            border: 2.5px solid ${colors.main};\r\n            border-radius: 5px;\r\n            height: 40px;\r\n            text-align: center;\r\n            color: ${colors.main};\r\n            font-family: inherit;\r\n            font-size: 1rem;\r\n          `}\r\n          type=\"text\"\r\n          id=\"minterm-input\"\r\n          name=\"minterm-input\"\r\n          placeholder=\"2 3 d4 10...\"\r\n          value={minterms}\r\n          onChange={onUserInput}\r\n        />\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\n\r\nMintermInput.propTypes = {\r\n  onMintermInput: PropTypes.func,\r\n};\r\n\r\nMintermInput.defaultProps = {\r\n  onMintermInput: () => {},\r\n};\r\n\r\nexport default MintermInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\n\r\nimport colors from '../../util/colors';\r\n\r\nconst buttonStyle = css`\r\n  padding: 0 1rem;\r\n  margin-top: 24px;\r\n  height: 40px;\r\n  color: ${colors.main};\r\n  background: white;\r\n  border-radius: 5px;\r\n  border: 2.5px solid ${colors.main};\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${colors.main};\r\n    color: white;\r\n  }\r\n`;\r\n\r\nfunction ClearButton(props) {\r\n  const { onClick } = props;\r\n  return (\r\n    <div >\r\n      <button css={buttonStyle} onClick={() => onClick()}>\r\n        Clear\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nClearButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ClearButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport MapPanel from './MapPanel.jsx';\r\nimport MintermInput from './MintermInput.jsx';\r\nimport ClearButton from './ClearButton.jsx';\r\n\r\nimport colors from '../../util/colors';\r\n\r\nfunction BottomBar(props) {\r\n  const { activeButton, onMintermInput, onClearButtonClick, onPanelClick } = props;\r\n  return (\r\n    <div css={css`\r\n      position: fixed;\r\n      bottom: 0;\r\n      right: 0;\r\n      left: 0;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-around;\r\n      padding: 2rem 0;\r\n    `}>\r\n      <div css={css`\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 70%;\r\n        @media (max-width: 584px) {\r\n          display: none;\r\n        }\r\n      `}>\r\n        <MintermInput onMintermInput={onMintermInput} />\r\n        <ClearButton onClick={onClearButtonClick} />\r\n      </div>\r\n      <MapPanel onClick={onPanelClick} activeButton={activeButton}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nBottomBar.propTypes = {\r\n  onMintermInput: PropTypes.func,\r\n  onClearButtonClick: PropTypes.func,\r\n  onPanelClick: PropTypes.func,\r\n  activeButton: PropTypes.number,\r\n}\r\n\r\nexport default BottomBar;\r\n","export default {\r\n  '2': {\r\n    leftLabelMap: ['A'],\r\n    leftTerms: ['0', '1'],\r\n    topLabelMap: ['B'],\r\n    topTerms: ['0', '1'],\r\n    gridSize: '150px',\r\n  },\r\n  '3': {\r\n    leftLabelMap: ['A'],\r\n    leftTerms: ['0', '1'],\r\n    topLabelMap: ['B', 'C'],\r\n    topTerms: ['00', '01', '11', '10'],\r\n    gridSize: '150px',\r\n  },\r\n  '4': {\r\n    leftLabelMap: ['A', 'B'],\r\n    leftTerms: ['00', '01', '11', '10'],\r\n    topLabelMap: ['C', 'D'],\r\n    topTerms: ['00', '01', '11', '10'],\r\n    gridSize: '150px',\r\n  },\r\n  '5': {\r\n    leftLabelMap: ['A', 'B', 'C'],\r\n    leftTerms: ['000', '001', '011', '010', '110', '111', '101', '100'],\r\n    topLabelMap: ['D', 'E'],\r\n    topTerms: ['00', '01', '11', '10'],\r\n    gridSize: '75px',\r\n  },\r\n  '6': {\r\n    leftLabelMap: ['A', 'B', 'C'],\r\n    leftTerms: ['000', '001', '011', '010', '110', '111', '101', '100'],\r\n    topLabelMap: ['D', 'E', 'F'],\r\n    topTerms: ['000', '001', '011', '010', '110', '111', '101', '100'],\r\n    gridSize: '75px',\r\n  },\r\n  'default': {\r\n    leftLabelMap: [],\r\n    leftTerms: [],\r\n    topLabelMap: [],\r\n    topTerms: [],\r\n    gridSize: '75px',\r\n  },\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\n\r\n\r\nfunction GridButtonColorOverlay(props) {\r\n  const { \r\n    groupingColors,\r\n    gridBoxSize,\r\n    highlighted,\r\n  } = props;\r\n\r\n  const baseSize = parseInt(gridBoxSize, 10) - 8;\r\n\r\n  const test = highlighted ? `&::before {\r\n    content: '';\r\n    background: #ffffff88;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    animation: 0.3s ease-out pop;\r\n  }` : '';\r\n\r\n  const overlay = groupingColors.map((color, idx) => {\r\n    return <div css={css`\r\n      position: absolute;\r\n      height: ${baseSize / groupingColors.length}px;\r\n      width: ${baseSize}px;\r\n      background: ${color};\r\n      left: 0;\r\n      top: ${(baseSize / groupingColors.length) * idx}px;\r\n      @media (max-width: 600px) {\r\n        width: ${baseSize/2 - 3}px;\r\n      }\r\n      ${test}\r\n    `}/>\r\n  });\r\n\r\n  return (\r\n    <>\r\n      { overlay }\r\n    </>\r\n  );\r\n}\r\n\r\nGridButtonColorOverlay.propTypes = {\r\n  groupingColors: PropTypes.array,\r\n  gridBoxSize: PropTypes.string.isRequired,\r\n  highlighted: PropTypes.bool,\r\n};\r\n\r\nGridButtonColorOverlay.defaultProps = {\r\n  groupingColors: [],\r\n  highlighted: false,\r\n};\r\n\r\nexport default GridButtonColorOverlay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\nimport GridButtonColorOverlay from './GridButtonColorOverlay.jsx';\r\n\r\nfunction GridButton(props) {\r\n  const { \r\n    binaryValue, \r\n    decimalValue, \r\n    gridValue, \r\n    gridBoxSize,\r\n    onClick,\r\n  } = props;\r\n\r\n  const valueStyling = (() => {\r\n    if (gridValue.value === '1') {\r\n      return `border: 2.5px solid ${colors.gridButtonTrue};`;\r\n    } else if (gridValue.value === 'X') {\r\n      return `border: 2.5px solid ${colors.gridButtonDontCare};`;\r\n    }\r\n  })();\r\n  return (\r\n    <button css={css`\r\n        width: 100%;\r\n        height: 100%;\r\n        background: ${colors.gridButton};\r\n        border-radius: 3px;\r\n        position: relative;\r\n        &:hover {\r\n          cursor: pointer;\r\n          outline: 2px solid ${colors.gridButtonHover};\r\n        }\r\n        ${valueStyling}\r\n      `}\r\n      onClick={() => onClick(decimalValue)}\r\n    >\r\n      <GridButtonColorOverlay \r\n        groupingColors={gridValue.colors} \r\n        gridBoxSize={gridBoxSize}\r\n        highlighted={gridValue.highlighted}\r\n      />\r\n      <p css={css`\r\n        font-size: 1rem;\r\n      `}>\r\n        {gridValue.value}\r\n      </p>\r\n      <p css={css`\r\n        position: absolute;\r\n        top: 5px;\r\n        left: 5px;\r\n        font-size: 0.8rem;\r\n      `}>\r\n        {decimalValue}\r\n      </p>\r\n      <p css={css`\r\n        position: absolute;\r\n        bottom: 5px;\r\n        right: 5px;\r\n        font-size: 0.8rem;\r\n        @media (max-width: 600px) {\r\n          display: none;\r\n        }\r\n      `}>\r\n        {binaryValue}\r\n      </p>\r\n    </button>\r\n  );\r\n}\r\n\r\nGridButton.propTypes = {\r\n  binaryValue: PropTypes.number.isRequired,\r\n  decimalValue: PropTypes.number.isRequired,\r\n  gridValue: PropTypes.string.isRequired,\r\n  gridBoxSize: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GridButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\n\r\nimport GridButton from './GridButton';\r\n\r\nfunction TableRow(props) {\r\n  const { topTerms, leftTerm, gridValues, onClick, gridBoxSize } = props;\r\n\r\n  const tiles = [];\r\n\r\n  topTerms.forEach((topTerm, idx) => {\r\n    const mintermBinaryValue = leftTerm + topTerm;\r\n    const mintermDecimalValue = parseInt(mintermBinaryValue, 2);\r\n    const separatorStyling = (idx !== 0 && idx % 4 === 0) ? 'margin-left: 15px;' : '';\r\n    tiles.push(\r\n      <div css={css`\r\n        width: ${gridBoxSize};\r\n        padding: 2px;\r\n        ${separatorStyling}\r\n        @media (max-width: 600px) {\r\n          width: ${parseInt(gridBoxSize, 10)/2}px;\r\n        }\r\n      `}>\r\n        <GridButton \r\n          decimalValue={mintermDecimalValue} \r\n          binaryValue={mintermBinaryValue} \r\n          gridValue={gridValues[mintermDecimalValue]}\r\n          gridBoxSize={gridBoxSize}\r\n          onClick={onClick}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n  \r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      flex-direction: row;\r\n      height: ${gridBoxSize};\r\n    `}>\r\n      {tiles}\r\n    </div>\r\n  );\r\n}\r\n\r\nTableRow.propTypes = {\r\n  topTerms: PropTypes.array.isRequired,\r\n  leftTerm: PropTypes.string.isRequired,\r\n  gridValues: PropTypes.array.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  gridBoxSize: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\n\r\nfunction TableTopLabelBar(props) {\r\n  const { labels, gridBoxSize } = props;\r\n\r\n  const labelElements = [];\r\n\r\n  labels.forEach((label, idx) => {\r\n    const separatorStyling = (idx !== 0 && idx % 4 === 0) ? 'margin-left: 15px;' : '';\r\n    labelElements.push(<div css={css`\r\n      width: ${gridBoxSize};\r\n      text-align: center;\r\n      ${separatorStyling}\r\n      @media (max-width: 600px) {\r\n        width: ${parseInt(gridBoxSize, 10)/2}px;\r\n        font-size: 0.9rem;\r\n      }\r\n    `}>\r\n      {label}\r\n    </div>);\r\n  })\r\n  \r\n  \r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      flex-direction: row;\r\n      margin-bottom: 15px;\r\n      color: ${colors.main};\r\n    `}>\r\n      {labelElements}\r\n    </div>\r\n  );\r\n}\r\n\r\nTableTopLabelBar.propTypes = {\r\n  labels: PropTypes.array.isRequired,\r\n  gridBoxSize: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TableTopLabelBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport colors from '../../util/colors';\r\n\r\nfunction TableLeftLabelBar(props) {\r\n  const { labels, gridBoxSize } = props;\r\n\r\n  const labelElements = [];\r\n\r\n  labels.reverse().forEach((label, idx) => {\r\n    const separatorStyling = (idx !== 0 && idx % 4 === 0) ? 'margin-bottom: 15px;' : '';\r\n    labelElements.push(<div css={css`\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      height: ${gridBoxSize};\r\n      padding: 0 2px;\r\n      margin-right: 15px;\r\n      ${separatorStyling}\r\n      @media (max-width: 600px) {\r\n        font-size: 0.9rem;\r\n      }\r\n    `}>\r\n      {label}\r\n    </div>);\r\n  });\r\n    \r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      flex-direction: column-reverse;\r\n      color: ${colors.main};\r\n    `}>\r\n      {labelElements}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nTableLeftLabelBar.propTypes = {\r\n  labels: PropTypes.array.isRequired,\r\n  gridBoxSize: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TableLeftLabelBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\nimport TableRow from './TableRow.jsx';\r\nimport TableTopLabelBar from './TableTopLabelBar.jsx';\r\nimport TableLeftLabelBar from './TableLeftLabelBar.jsx';\r\n\r\nimport colors from '../../util/colors';\r\n\r\n\r\nfunction convertBinaryStringToVariableMinterm(binaryStr, map) {\r\n  return binaryStr\r\n    .split('')\r\n    .map((char, idx) => {\r\n      const correspondingVar = map[idx] ? map[idx] : '(NA)';\r\n      return char === '1' ? correspondingVar : correspondingVar + \"'\";\r\n    })\r\n    .join('');\r\n}\r\n\r\nfunction GridVisualTable(props) {\r\n  const { \r\n    leftTerms, \r\n    topTerms, \r\n    leftLabelMap, \r\n    topLabelMap, \r\n    gridValues,\r\n    onClick,\r\n    gridBoxSize,\r\n    highlightedMinterms,\r\n  } = props;\r\n\r\n  const leftLabels = leftTerms.map(term => convertBinaryStringToVariableMinterm(term, leftLabelMap));\r\n  const topLabels = topTerms.map(term => convertBinaryStringToVariableMinterm(term, topLabelMap));\r\n\r\n  const tableRows = leftTerms.map((leftTerm, idx) => {\r\n    const separatorStyling = (idx !== 0 && idx % 4 === 0) ? 'margin-top: 15px;' : '';\r\n    return <div css={css`\r\n      ${separatorStyling}\r\n    `}\r\n    >\r\n      <TableRow \r\n        topTerms={topTerms} \r\n        leftTerm={leftTerm} \r\n        gridValues={gridValues}\r\n        onClick={onClick}\r\n        gridBoxSize={gridBoxSize}\r\n      />\r\n    </div>\r\n  });\r\n\r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      flex-direction: rows;\r\n      padding-bottom: 20px;\r\n      flex-shrink: 0;\r\n    `}>\r\n      <TableLeftLabelBar labels={leftLabels} gridBoxSize={gridBoxSize} />\r\n      <div css={css`\r\n        display: flex;\r\n        flex-direction: column;\r\n      `}>\r\n        <TableTopLabelBar labels={topLabels} gridBoxSize={gridBoxSize} />\r\n        { tableRows }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nGridVisualTable.propTypes = {\r\n  leftTerms: PropTypes.array.isRequired,\r\n  topTerms: PropTypes.array.isRequired,\r\n  leftLabelMap: PropTypes.array.isRequired,\r\n  topLabelMap: PropTypes.array.isRequired,\r\n  gridValues: PropTypes.array.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  gridBoxSize: PropTypes.string.isRequired,\r\n  highlightedMinterms: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default GridVisualTable;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\n\r\nimport colors from '../../util/colors';\r\n\r\nfunction GroupDisplayRow(props) {\r\n  const { mintermGroup } = props;\r\n\r\n  const groupingText = mintermGroup.decimalRepresentation.map((dec, idx) => {\r\n    if (idx === mintermGroup.decimalRepresentation.length - 1) return dec;\r\n    return `${dec}, `;\r\n  });\r\n\r\n  groupingText.unshift('(');\r\n  groupingText.push(') ');\r\n\r\n  return (\r\n      <div css={css`\r\n          padding: 10px;\r\n          padding-left: 10px;\r\n          display: flex;\r\n          align-items: center;\r\n          cursor: pointer;\r\n          &:hover {\r\n            background: #ffffff88;\r\n          }\r\n        `}\r\n      >\r\n        <div css={css`\r\n          border-radius: 50%;\r\n          height: 12px;\r\n          width: 12px;\r\n          background: ${mintermGroup.color};\r\n          margin-right: 10px;\r\n          flex-shrink: 0;\r\n        `}>\r\n        </div>\r\n          { groupingText.join('') }\r\n          {mintermGroup.outputTerm}\r\n      </div>\r\n  );\r\n}\r\n\r\nGroupDisplayRow.propTypes = {\r\n  mintermGroup: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nexport default GroupDisplayRow;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\n\r\nimport colors from '../../util/colors';\r\nimport GroupDisplayRow from './GroupDisplayRow.jsx';\r\n\r\nfunction GroupDisplay(props) {\r\n  const { \r\n    mintermGroups, \r\n    onNextGroupingButtonClick,\r\n    numberOfGroupings,\r\n    setHighlightedMinterms,\r\n  } = props;\r\n\r\n  function onMouseEnterRow(group) {\r\n    console.dir(group, {depth:100})\r\n    setHighlightedMinterms(group.decimalRepresentation);\r\n  }\r\n\r\n  function onMouseLeaveRow() {\r\n    setHighlightedMinterms([]);\r\n  }  \r\n\r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      flex-shrink: 0;\r\n      flex-direction: column;\r\n      margin-left: 50px;\r\n      width: 300px;\r\n      @media (max-width: 600px) {\r\n        width: 80%;\r\n        margin-left: 0;\r\n        padding-top: 20px;\r\n        padding-bottom: 100px;\r\n      }\r\n    `}>\r\n      <div css={css`\r\n        display: flex;\r\n        flex-direction: row;\r\n        padding-bottom: 15px;\r\n        margin-bottom: 10px;\r\n        text-align: center;\r\n        color: ${colors.main};\r\n        width: 100%;\r\n        @media (max-width: 600px) {\r\n          border-bottom: 1.5px solid ${colors.minor};\r\n        }\r\n      `}>\r\n        <h4>Groups ({ mintermGroups.length })</h4>\r\n        { numberOfGroupings > 1 &&\r\n          <button \r\n            onClick={onNextGroupingButtonClick} \r\n            css={css`\r\n              font-family: inherit;\r\n              font-size: 0.9rem;\r\n              padding-left: .5rem;\r\n              cursor: pointer;\r\n            `}\r\n          >\r\n            Next\r\n          </button>\r\n        }\r\n      </div>\r\n      { mintermGroups.map((group, idx) =>\r\n        <div \r\n          onMouseEnter={onMouseEnterRow.bind(null, group)} \r\n          onMouseLeave={onMouseLeaveRow}\r\n        >\r\n          <GroupDisplayRow mintermGroup={group} key={idx} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nGroupDisplay.propTypes = {\r\n  mintermGroupings: PropTypes.array,\r\n  onNextGroupingButtonClick: PropTypes.func.isRequired,\r\n  numberOfGroupings: PropTypes.number.isRequired,\r\n  setHighlightedMinterms: PropTypes.func.isRequired,\r\n};\r\n\r\nGroupDisplay.defaultProps = {\r\n  mintermGroupings: [],\r\n};\r\n\r\nexport default GroupDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { jsx, css } from '@emotion/core';\r\n/** @jsx jsx */\r\n\r\n\r\nimport colors from '../../util/colors';\r\nimport tableData from '../../util/tableData';\r\nimport GridVisualTable from './GridVisualTable.jsx';\r\nimport GroupDisplay from './GroupDisplay.jsx';\r\n\r\nfunction TableContainer(props) {\r\n\r\n  const [highlightedMinterms, setHighlightedMinterms] = useState([]);\r\n  const { \r\n    varNum, \r\n    gridValues, \r\n    onGridButtonClick, \r\n    gridBoxSize,\r\n    mintermGroups,\r\n    selectedMintermGroup,\r\n    onNextGroupingButtonClick,\r\n    numberOfGroupings,\r\n  } = props;\r\n  const { \r\n    leftTerms, \r\n    topTerms,\r\n    leftLabelMap,\r\n    topLabelMap,\r\n  } = tableData[varNum] ? tableData[varNum] : tableData['default'];\r\n\r\n  gridValues.forEach(gridValues => {\r\n    gridValues.highlighted = false;\r\n  })\r\n\r\n  highlightedMinterms.forEach((decimalIndex) => {\r\n    gridValues[decimalIndex].highlighted = true;\r\n  });\r\n\r\n  return (\r\n    <div css={css`\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: flex-start;\r\n      flex-direction: row;\r\n      padding-top: 40px;\r\n      padding-bottom: 120px;\r\n      flex-wrap: no-wrap;\r\n      @media (max-width: 600px) {\r\n        flex-wrap: wrap;\r\n      }\r\n    `}>\r\n      <GridVisualTable \r\n        leftTerms={leftTerms}\r\n        topTerms={topTerms}\r\n        leftLabelMap={leftLabelMap}\r\n        topLabelMap={topLabelMap}\r\n        gridValues={gridValues}\r\n        onClick={onGridButtonClick}\r\n        gridBoxSize={gridBoxSize}\r\n        highlightedMinterms={highlightedMinterms}\r\n      />\r\n      <GroupDisplay \r\n        mintermGroups={mintermGroups} \r\n        key={mintermGroups.length} \r\n        selectedMintermGroup={selectedMintermGroup}\r\n        numberOfGroupings={numberOfGroupings}\r\n        onNextGroupingButtonClick={onNextGroupingButtonClick}\r\n        setHighlightedMinterms={setHighlightedMinterms}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nTableContainer.propTypes = {\r\n  varNum: PropTypes.number.isRequired,\r\n  gridValues: PropTypes.array.isRequired,\r\n  onGridButtonClick: PropTypes.func.isRequired,\r\n  onNextGroupingButtonClick: PropTypes.func.isRequired,\r\n  selectedMintermGroup: PropTypes.number,\r\n  gridBoxSize: PropTypes.string,\r\n  mintermGroups: PropTypes.array,\r\n  numberOfGroupings: PropTypes.number,\r\n};\r\n\r\nTableContainer.defaultProps = {\r\n  selectedMintermGroup: 0,\r\n  gridBoxSize: '75px',\r\n  mintermGroups: [],\r\n  numberOfGroupings: 1,\r\n};\r\n\r\nexport default TableContainer;\r\n","const Util = {\r\n  insertIntoString(string, index, text) {\r\n    return string.slice(0, index) + text + string.slice(index);\r\n  },\r\n  \r\n  range(n) {\r\n    return [...Array(n).keys()];\r\n  },\r\n  \r\n  convertToBinaryString(num, padding = 0) {\r\n    return num.toString(2).padStart(padding, '0');\r\n  },\r\n  \r\n  convertBinaryStrToBoolArr(binaryStr) {\r\n    return binaryStr.split('').map(x => x === '1');\r\n  },\r\n  \r\n  xorBoolArrays(arr1, arr2) {\r\n    const outputLength = Math.min(arr1.length, arr2.length);\r\n    const outputArr = [];\r\n    for (let i = 0; i < outputLength; i++) {\r\n      outputArr.push(( arr1[i] && !arr2[i] ) || ( !arr1[i] && arr2[i] ));\r\n    }\r\n    return outputArr;\r\n  },\r\n  \r\n  generateMasks(numOfTerms, fixedIndicies = []) {\r\n    const numOfNeighbors = Math.pow(2, numOfTerms) - 1;\r\n    const masks = this.range(numOfNeighbors)\r\n      .map(num => this.convertToBinaryString(num + 1, numOfTerms))\r\n      .map(binaryNumStr => {\r\n        let maskStr = binaryNumStr;\r\n        fixedIndicies.forEach(index => maskStr = this.insertIntoString(maskStr, index, '0'));\r\n        return maskStr;\r\n      })\r\n      .map(this.convertBinaryStrToBoolArr);\r\n    return masks;\r\n  },\r\n  \r\n  generateFixedIndicies(numOfTerms) {\r\n    const fixedIndiciesList = this.generateMasks(numOfTerms)\r\n      .map(mask => {\r\n        const indicies = this.range(numOfTerms);\r\n        mask.forEach((bool, idx) => {\r\n          if (!bool) indicies[idx] = -1;\r\n        });\r\n        return indicies.filter(x => x !== -1);\r\n      });\r\n    const allFixed = [];\r\n    return [allFixed, ...fixedIndiciesList].sort((a, b) => a.length > b.length);\r\n  },\r\n\r\n  filterOnlySubarrayOfSmallestLength(arr = []) {\r\n    let lengthOfSmallest = Number.MAX_VALUE;\r\n    for (let subarray of arr) {\r\n      if (subarray.length < lengthOfSmallest) lengthOfSmallest = subarray.length;\r\n    }\r\n    return arr.filter(subarray => subarray.length === lengthOfSmallest);\r\n  }\r\n};\r\n\r\nexport default Util;\r\n","import Util from './util';\r\n\r\nclass Minterm {\r\n  constructor(minterm = '', isDontCare = false) {\r\n    if (typeof minterm === 'string') {\r\n      this.terms = Util.convertBinaryStrToBoolArr(minterm);\r\n    } else if (typeof minterm === 'number') {\r\n      this.terms = Util.convertBinaryStrToBoolArr(Util.convertToBinaryString(minterm));\r\n    } else {\r\n      this.terms = minterm;\r\n    }\r\n    this.isDontCare = isDontCare;\r\n  }\r\n\r\n  getTerm(index) {\r\n    if (index < 0 || index >= this.terms.length) {\r\n      return null;\r\n    }\r\n    return this.terms[index];\r\n  }\r\n\r\n  getBinaryString() {\r\n    return this.terms.map(term => term ? '1' : '0').join('');\r\n  }\r\n\r\n  getDecimal() {\r\n    return parseInt(this.getBinaryString(), 2);\r\n  }\r\n\r\n  getNeighborTerms(fixedIndicies = []) {\r\n    const filteredFixedIndicies = fixedIndicies.filter(x => x >= 0 && x < this.terms.length);\r\n    filteredFixedIndicies.sort();\r\n  \r\n    const numOfFreeTerms = this.terms.length - filteredFixedIndicies.length;\r\n    if (numOfFreeTerms < 0) return [];\r\n\r\n    const permutationMasks = Util.generateMasks(numOfFreeTerms, filteredFixedIndicies);\r\n    const neighbors = permutationMasks\r\n      .map(mask => Util.xorBoolArrays(mask, this.terms))\r\n      .map(neighbor => new Minterm(neighbor));\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  getSize() {\r\n    return this.terms.length;\r\n  }\r\n\r\n  equals(other) {\r\n    if (this.terms.length !== other.terms.length) return false;\r\n    for (let i = 0; i < this.terms.length; i++) {\r\n      if (this.terms[i] !== other.terms[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Minterm;\r\n","function convertMintermArraysToDecimalArray(minterms) {\r\n  return minterms\r\n    .map(minterm => {\r\n      const binaryRepresentation = minterm.terms.map(term => term ? '1' : '0').join('');\r\n      return parseInt(binaryRepresentation, 2);\r\n  })\r\n}\r\n\r\nclass KMapGroup {\r\n  constructor(minterms, fixedIndicies, variableNames) {\r\n    this.minterms = minterms;\r\n    this.fixedIndicies = fixedIndicies;\r\n    this.groupSize = minterms.length;\r\n    this.mintermSize = this.groupSize === 0 ? 0 : minterms[0].getSize();\r\n    this.outputTermRaw = this.getOutputTermRaw();\r\n    this.outputTerm = this.getOutputTerm(variableNames);\r\n    this.decimalRepresentation = convertMintermArraysToDecimalArray(minterms)\r\n      .sort((a, b) => a > b);\r\n  }\r\n\r\n  getOutputTermRaw() {\r\n    if (this.outputTermRaw != null) return this.outputTermRaw;\r\n    if (this.groupSize === 0) return null;\r\n    const outputTerm = (new Array(this.mintermSize)).fill(-1);\r\n    this.fixedIndicies.forEach(fixedIndex => {\r\n      outputTerm[fixedIndex] = (this.minterms[0].getTerm(fixedIndex) === true) ? 1 : 0;\r\n    })\r\n    return outputTerm;\r\n  }\r\n\r\n  getOutputTerm(variableNames = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r\n    if (this.outputTerm != null) return this.outputTerm;\r\n    if (this.outputTermRaw.every(term => term === -1)) return 'True';\r\n    return this.outputTermRaw\r\n      .map((rawValue, idx) => {\r\n        if (rawValue === -1) return null;\r\n        let outputVariable = variableNames[idx];\r\n        if (outputVariable == null) outputVariable = '(N/A)';\r\n        if (rawValue === 1) return outputVariable;\r\n        return outputVariable + '\\'';\r\n      })\r\n      .filter(x => x !== null)\r\n      .join('');\r\n  }\r\n}\r\n\r\n\r\nexport default KMapGroup;\r\n","class GroupingTreeNode {\r\n  constructor(visitedMinterms, mintermQueue = [], groups = []) {\r\n    this.visitedMinterms = visitedMinterms;\r\n    this.mintermQueue = mintermQueue;\r\n    this.groups = groups;\r\n    this.parent = null;\r\n    this.children = [];\r\n    this.activeChild = -1;\r\n  }\r\n}\r\n\r\nclass GroupingTree {\r\n  constructor(visitedMinterms = [], mintermQueue = [], groups = []) {\r\n    this.root = new GroupingTreeNode(visitedMinterms, mintermQueue, groups);\r\n    this.current = this.root;\r\n  }\r\n\r\n  addChildToCurrent(visitedMinterms = [], mintermQueue = [], groups = []) {\r\n    const child = new GroupingTreeNode(visitedMinterms, mintermQueue, groups);\r\n    child.parent = this.current;\r\n    this.current.children.push(child);\r\n  }\r\n\r\n  moveCurrentToChild(childIndex = 0) {\r\n    if (this.current.children[childIndex] == null) return null;\r\n    this.current = this.current.children[childIndex];\r\n    return this.current;\r\n  }\r\n\r\n  moveCurrentToParent() {\r\n    if (this.current.parent == null) return null;\r\n    this.current = this.current.parent;\r\n    return this.current;\r\n  }\r\n\r\n  moveCurrentToNextActiveChild() {\r\n    this.current.activeChild += 1;\r\n    const nextChild = this.moveCurrentToChild(this.current.activeChild);\r\n    if (nextChild == null) {\r\n      const parent = this.moveCurrentToParent();\r\n      if (parent == null) {\r\n        this.current = null;\r\n        return null;\r\n      }\r\n      return this.moveCurrentToNextActiveChild();\r\n    }\r\n    return nextChild;\r\n  }\r\n\r\n  getCurrent() {\r\n    return this.current;\r\n  }\r\n}\r\n\r\nexport default GroupingTree;\r\n","import Util from './util';\r\nimport Minterm from './minterm';\r\nimport KMapGroup from './kmap-group';\r\nimport GroupingTree from './grouping-tree';\r\n\r\nclass MintermList {\r\n  constructor(numOfVariables = 1, baseTenMinterms = [], baseTenDontCares = []) {\r\n    this.numOfVariables = numOfVariables;\r\n    const minterms = baseTenMinterms\r\n      .map(term => Util.convertToBinaryString(term, numOfVariables))\r\n      .filter(term => term.length <= numOfVariables)\r\n      .map(term => new Minterm(term));\r\n    const dontCares = baseTenDontCares\r\n      .map(term => Util.convertToBinaryString(term, numOfVariables))\r\n      .filter(term => term.length <= numOfVariables)\r\n      .map(term => new Minterm(term, true));\r\n    this.minterms = [...minterms, ...dontCares];\r\n    this.dontCares = dontCares;\r\n  }\r\n\r\n  containsMinterm(targetMinterm, ignoreDontCares = false) {\r\n    for (const minterm of this.minterms) {\r\n      if (ignoreDontCares) {\r\n        if (minterm.equals(targetMinterm) && !targetMinterm.isDontCare) return true;\r\n      } else {\r\n        if (minterm.equals(targetMinterm)) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  containsMinterms(targetMinterms, ignoreDontCares = false) {\r\n    for (const targetMinterm of targetMinterms) {\r\n      if (!this.containsMinterm(targetMinterm, ignoreDontCares)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  addMinterm(minterm) {\r\n    this.minterms.push(minterm);\r\n  }\r\n\r\n  addMinterms(minterms) {\r\n    for (const minterm of minterms) {\r\n      this.addMinterm(minterm);\r\n    }\r\n  }\r\n\r\n  getMintermUsingNumber(targetDecimalMinterm) {;\r\n    for (const minterm of this.minterms) {\r\n      if (minterm.getDecimal() === targetDecimalMinterm) return minterm;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getNumberOfMatchingMinterms(mintermList, ignoreDontCares = false) {\r\n    let numOfMatches = 0;\r\n    mintermList.forEach(minterm => {\r\n      if (this.containsMinterm(minterm, ignoreDontCares)) {\r\n        numOfMatches += 1;\r\n      }\r\n    })\r\n    return numOfMatches;\r\n  }\r\n\r\n  // For a true minterm, go through all possible groups and add to possible groupings list\r\n  // if they only cover other true minterms or dont cares\r\n  __getPossibleGroupingsOfLargestSize(front, visitedMinterms) {\r\n    let largestGroupSize = null;\r\n    const possibleGroupings = [];\r\n    const fixedIndiciesList = Util.generateFixedIndicies(this.numOfVariables);\r\n    for (const fixedIndicies of fixedIndiciesList) {\r\n      const neighbors = front.getNeighborTerms(fixedIndicies);\r\n      if (!this.containsMinterms(neighbors)) continue;\r\n\r\n      this.__updateOtherMintermsDontCarenessWithThisList(neighbors);\r\n      const currentGroup = [front, ...neighbors];\r\n\r\n      if (largestGroupSize != null && currentGroup.length < largestGroupSize) break;\r\n      largestGroupSize = currentGroup.length;\r\n      let numOfMatches = visitedMinterms.getNumberOfMatchingMinterms(currentGroup);\r\n      let numOfUnvisitedTargetMintermsInGroup = currentGroup.length - numOfMatches;\r\n      possibleGroupings.push({group: currentGroup, numOfUnvisited: numOfUnvisitedTargetMintermsInGroup, fixedIndicies});\r\n    }\r\n    return possibleGroupings;\r\n  }\r\n\r\n  // Only choose the possible grouping that has the most unvisited minterms\r\n  __getPossibleGroupingsWithMostUnvisitedMinterms(front, visitedMinterms) {\r\n    let possibleGroupings = this.__getPossibleGroupingsOfLargestSize(front, visitedMinterms);\r\n    possibleGroupings.sort((a, b) => a.numOfUnvisited < b.numOfUnvisited);\r\n    possibleGroupings = possibleGroupings.filter(group => group.numOfUnvisited === possibleGroupings[0].numOfUnvisited);\r\n    return possibleGroupings;\r\n  }\r\n\r\n  getGroups() {\r\n    const visitedMinterms = new MintermList(this.numOfVariables);\r\n    visitedMinterms.addMinterms(this.dontCares);\r\n    const mintermQueue = [...this.minterms];\r\n    const groupingTree = new GroupingTree(visitedMinterms, mintermQueue);\r\n    const allSolutions = [];\r\n\r\n    while (groupingTree.getCurrent() != null) {\r\n\r\n      const { \r\n        mintermQueue: currentMintermQueue,\r\n        visitedMinterms: currentVisitedMinterms,\r\n        groups: currentGroups,\r\n      } = groupingTree.getCurrent();\r\n\r\n      const front = currentMintermQueue[0];\r\n      if (front == null) {\r\n        groupingTree.moveCurrentToNextActiveChild();\r\n        allSolutions.push(currentGroups.map(group => new KMapGroup(group.group, group.fixedIndicies)));\r\n        continue;\r\n      } else if (front.isDontCare || currentVisitedMinterms.containsMinterm(front)) {\r\n        const shiftedQueue = currentMintermQueue.slice(1);\r\n        groupingTree.getCurrent().mintermQueue = shiftedQueue;\r\n        continue;\r\n      }\r\n\r\n      const possibleGroupings = this.__getPossibleGroupingsWithMostUnvisitedMinterms(front, currentVisitedMinterms);\r\n\r\n      if (possibleGroupings.length !== 0) {\r\n        for (const possibleGrouping of possibleGroupings) {\r\n          const visitedMintermsCopy = currentVisitedMinterms.createCopy();\r\n          visitedMintermsCopy.addMinterms(possibleGrouping.group);\r\n          const groupsCopy = [...currentGroups, possibleGrouping];\r\n          const mintermQueueCopy = currentMintermQueue.slice(1);\r\n          groupingTree.addChildToCurrent(visitedMintermsCopy, mintermQueueCopy, groupsCopy);\r\n        }\r\n      } else {\r\n        allSolutions.push(currentGroups.map(group => new KMapGroup(group.group, group.fixedIndicies)));\r\n      }\r\n\r\n      groupingTree.moveCurrentToNextActiveChild();\r\n    }\r\n    const filteredSolutions = Util.filterOnlySubarrayOfSmallestLength(allSolutions).map(grouping => {\r\n      return grouping.sort((a, b) => a.groupSize < b.groupSize)\r\n    });\r\n    return filteredSolutions;\r\n  }\r\n\r\n\r\n  __updateOtherMintermsDontCarenessWithThisList(otherMinterms) {\r\n    otherMinterms.forEach(otherMinterm => {\r\n      const thisListEquivalent = this.getMintermUsingNumber(otherMinterm.getDecimal());\r\n      if (thisListEquivalent !== null && thisListEquivalent.isDontCare) {\r\n        otherMinterm.isDontCare = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  createCopy() {\r\n    const copy = new MintermList(this.numOfVariables);\r\n    copy.minterms = this.minterms.slice();\r\n    copy.dontCares = this.dontCares.slice();\r\n    return copy;\r\n  }\r\n}\r\n\r\nexport default MintermList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { jsx, Global, css } from '@emotion/core';\r\nimport Cookies from 'universal-cookie';\r\n/** @jsx jsx */\r\n\r\nimport TopBar from './components/TopBar.jsx';\r\nimport BottomBar from './components/bottom-bar/BottomBar.jsx';\r\nimport TableContainer from './components/tables/TableContainer.jsx';\r\n\r\nimport colors, { tempGroupingColors } from './util/colors';\r\nimport tableData from './util/tableData';\r\nimport MintermList from './map-solver/minterm-list';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst initialVarNumPage = cookies.get('varNumPage') || '4';\r\n\r\nfunction GridButtonData() {\r\n  this.value = '0';\r\n  this.colors = [];\r\n  this.highlighted = false;\r\n}\r\n\r\nfunction generateNewGrid(varNum = 6) {\r\n  return new Array(Math.pow(2, varNum)).fill().map(() => new GridButtonData());\r\n}\r\n\r\nfunction fillNewGrid(newGrid, minterms, varNum) {\r\n  minterms.terms.filter(term => term < Math.pow(2, varNum)).forEach(term => newGrid[term].value = '1');\r\n  minterms.dontCares.filter(term => term < Math.pow(2, varNum)).forEach(term => newGrid[term].value = 'X');\r\n}\r\n\r\nfunction App() {\r\n  const [varNumPage, setVarNumPage] = useState(parseInt(initialVarNumPage, 10));\r\n  const [gridValues, setGridValues] = useState(generateNewGrid(varNumPage));\r\n  const [gridBoxSize, setGridBoxSize] = useState(tableData[varNumPage].gridSize);\r\n  const [mintermGroupings, setMintermGroupings] = useState([]);\r\n  const [selectedMintermGroup, setSelectedMintermGroup ] = useState(0);\r\n  const [activeMinterms, setActiveMinterms] = useState({\r\n    terms: [],\r\n    dontCares: [],\r\n  });\r\n  \r\n  useEffect(() => {\r\n    document.title = `${varNumPage} Variable K-Map Visual`;\r\n    cookies.set('varNumPage', varNumPage, {maxAge: 604800});\r\n  }, [varNumPage]);\r\n\r\n  /**\r\n   * Changes which table is displayed \r\n   */\r\n  function handlePanelClick(varNum) {\r\n    setVarNumPage(varNum);\r\n    const newGridValues = generateNewGrid(varNum);\r\n    setGridValues(newGridValues);\r\n    setGridBoxSize(tableData[varNum].gridSize);\r\n    setMintermGroupings([]);\r\n  }\r\n\r\n  /**\r\n   * Resets the table completely with blank grid values \r\n   */\r\n  function handleClearButtonClick() {\r\n    setGridValues(generateNewGrid(varNumPage));\r\n    setMintermGroupings([]);\r\n    setSelectedMintermGroup(0);\r\n  }\r\n\r\n  /** \r\n   * When there is more than one possible solution detected, a next button will \r\n   * appear next to the group display box. Clicking this button cycles to the\r\n   * next solution and updates the colors of the grid values\r\n   */\r\n  function handleNextGroupingButtonClick() {\r\n    let next = (() => {\r\n      if (selectedMintermGroup + 1 >= mintermGroupings.length) return 0;\r\n      return selectedMintermGroup + 1;\r\n    })();\r\n    setSelectedMintermGroup(next);\r\n    const newGridValues = generateNewGrid(varNumPage);\r\n    fillNewGrid(newGridValues, activeMinterms, varNumPage);\r\n    resetGridColors(newGridValues);\r\n    setupGridColors(newGridValues, mintermGroupings[next]);\r\n    setGridValues(newGridValues);\r\n  }\r\n\r\n  /**\r\n   * Handles input through the text bar\r\n   * Updates table/grid values with new groupings \r\n   */\r\n  function onMintermInput(minterms) {\r\n    setSelectedMintermGroup(0);\r\n    setActiveMinterms(minterms);\r\n    const newGridValues = generateNewGrid(varNumPage);\r\n    fillNewGrid(newGridValues, minterms, varNumPage);\r\n    const mintermGroupings = new MintermList(varNumPage, minterms.terms, minterms.dontCares).getGroups();\r\n    setMintermGroupings(mintermGroupings);\r\n    resetGridColors(newGridValues);\r\n    setupGridColors(newGridValues, mintermGroupings[0]);\r\n    setGridValues(newGridValues);\r\n  }\r\n\r\n  /**\r\n   * Handles button click when table is clicked\r\n   * Creates a new copy of the values and sets groupings in the copy\r\n   * Then, the app is updated with the copy \r\n   */\r\n  function onGridButtonClick(decimalValue) {\r\n    setSelectedMintermGroup(0);\r\n    const gridValuesCopy = new Array(gridValues.length).fill()\r\n      .map((_, idx) => JSON.parse(JSON.stringify(gridValues[idx])));\r\n    gridValuesCopy[decimalValue].value = (() => {\r\n      if (gridValues[decimalValue].value === '0') return '1';\r\n      if (gridValues[decimalValue].value === '1') return 'X';\r\n      return '0';\r\n    })();\r\n    const terms = gridValuesCopy.map((x, idx) => (x.value === '1') ? idx : null).filter(x => x !== null);\r\n    const dontCares = gridValuesCopy.map((x, idx) => (x.value === 'X') ? idx : null).filter(x => x !== null);\r\n    const newActiveMinterms = { terms, dontCares };\r\n    const mintermGroupings = new MintermList(varNumPage, terms, dontCares).getGroups();\r\n    setActiveMinterms(newActiveMinterms);\r\n    setMintermGroupings(mintermGroupings);\r\n    resetGridColors(gridValuesCopy);\r\n    setupGridColors(gridValuesCopy, mintermGroupings[0]);\r\n    setGridValues(gridValuesCopy);\r\n  }\r\n  \r\n  /* Warning: Mutates gridValues */\r\n  function resetGridColors(gridValues) {\r\n    gridValues.forEach(gridValue => {\r\n      gridValue.colors = [];\r\n    })\r\n  }\r\n\r\n  \r\n  /**\r\n   * !! Warning: Mutates gridValues !!\r\n   * Adds a color array to the grid values depending on the groupings \r\n   */\r\n  function setupGridColors(gridValues, grouping = []) {\r\n    grouping.forEach((group, groupingIdx) => {\r\n      group.color = tempGroupingColors[groupingIdx];\r\n      group.decimalRepresentation.forEach(gridIdx => {\r\n        gridValues[gridIdx].colors.push(tempGroupingColors[groupingIdx]);\r\n      });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div css={css`\r\n      height: 100vh;\r\n    `}>\r\n      <Global styles={css`\r\n        body {\r\n          background: ${colors.background};\r\n        }\r\n      `} />\r\n      <TopBar \r\n        title={`Karnaugh Map`}\r\n        subtitle={`${varNumPage} Variables`}  \r\n      />\r\n      <TableContainer \r\n        varNum={varNumPage}\r\n        gridValues={gridValues}\r\n        onGridButtonClick={onGridButtonClick}\r\n        onNextGroupingButtonClick={handleNextGroupingButtonClick}\r\n        gridBoxSize={gridBoxSize}\r\n        mintermGroups={mintermGroupings[selectedMintermGroup]}\r\n        numberOfGroupings={mintermGroupings.length}\r\n        selectedMintermGroup={selectedMintermGroup}\r\n      />\r\n      <BottomBar \r\n        onMintermInput={onMintermInput}\r\n        onClearButtonClick={handleClearButtonClick}\r\n        onPanelClick={handlePanelClick} \r\n        activeButton={varNumPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}